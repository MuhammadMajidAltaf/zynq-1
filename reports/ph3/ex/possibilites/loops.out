"Read"
[:options]
Reading in objdump
sec .text
Read-in completed in 1 sections
------------------------------------------------------------
"BasicBlock"
[:options, :sections, :flat_prof]
Starting Basic Block analysis
analysing func: unrolled@0
analysing func: rolled@28
analysing func: partial_unrolled@4c
7 Basic Blocks completed
------------------------------------------------------------
"Arith"
[:options, :sections, :flat_prof, :bbs]
Starting arithmetic analysis
analysing bb: unrolled@0
analysing bb: partial_unrolled@4c
analysing bb: rolled@28
analysing bb: partial_unrolled@4c
analysing bb: rolled@28
analysing bb: rolled@28
analysing bb: partial_unrolled@4c
Arithmetic analysis concluded
------------------------------------------------------------
"SIMD"
[:options, :sections, :flat_prof, :bbs]
Starting SIMD analysis
analysing bb: unrolled@0
analysing bb: partial_unrolled@4c
analysing bb: rolled@28
analysing bb: partial_unrolled@4c
analysing bb: rolled@28
analysing bb: rolled@28
analysing bb: partial_unrolled@4c
SIMD analysis conclude - found 0 BBs
------------------------------------------------------------
"Loops"
[:options, :sections, :flat_prof, :bbs]
Starting Loop analysis
analysing func: unrolled@0
analysing func: rolled@28
analysing func: partial_unrolled@4c
[]
Loop analysis concluded - found 0 loops
------------------------------------------------------------
"GenVHDL"
[:options, :sections, :flat_prof, :bbs, :loops]
VHDL Generation started
order analysing bb: unrolled@0
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
==============================
l: 0: mla ["r3", "r1", "r0", "r0"]
d: 
dl: 
==============================
l: 4: mla ["r3", "r3", "r1", "r0"]
d: {:addr=>0, :raw=>"e0230091", :instr=>"mla", :args=>["r3", "r1", "r0", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[], :deps_lines=>[]}
dl: 0
==============================
l: 8: mla ["r3", "r3", "r1", "r0"]
d: {:addr=>4, :raw=>"e0230193", :instr=>"mla", :args=>["r3", "r3", "r1", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[{:addr=>0, :raw=>"e0230091", :instr=>"mla", :args=>["r3", "r1", "r0", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[], :deps_lines=>[]}], :deps_lines=>[0]},{:addr=>0, :raw=>"e0230091", :instr=>"mla", :args=>["r3", "r1", "r0", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[], :deps_lines=>[]}
dl: 4,0
==============================
l: c: mla ["r3", "r3", "r1", "r0"]
d: {:addr=>8, :raw=>"e0230193", :instr=>"mla", :args=>["r3", "r3", "r1", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[{:addr=>4, :raw=>"e0230193", :instr=>"mla", :args=>["r3", "r3", "r1", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[{:addr=>0, :raw=>"e0230091", :instr=>"mla", :args=>["r3", "r1", "r0", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[], :deps_lines=>[]}], :deps_lines=>[0]}, {:addr=>0, :raw=>"e0230091", :instr=>"mla", :args=>["r3", "r1", "r0", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[], :deps_lines=>[]}], :deps_lines=>[4, 0]},{:addr=>0, :raw=>"e0230091", :instr=>"mla", :args=>["r3", "r1", "r0", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[], :deps_lines=>[]}
dl: 8,0
==============================
l: 10: mla ["r3", "r3", "r1", "r0"]
d: {:addr=>12, :raw=>"e0230193", :instr=>"mla", :args=>["r3", "r3", "r1", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[{:addr=>8, :raw=>"e0230193", :instr=>"mla", :args=>["r3", "r3", "r1", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[{:addr=>4, :raw=>"e0230193", :instr=>"mla", :args=>["r3", "r3", "r1", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[{:addr=>0, :raw=>"e0230091", :instr=>"mla", :args=>["r3", "r1", "r0", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[], :deps_lines=>[]}], :deps_lines=>[0]}, {:addr=>0, :raw=>"e0230091", :instr=>"mla", :args=>["r3", "r1", "r0", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[], :deps_lines=>[]}], :deps_lines=>[4, 0]}, {:addr=>0, :raw=>"e0230091", :instr=>"mla", :args=>["r3", "r1", "r0", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[], :deps_lines=>[]}], :deps_lines=>[8, 0]},{:addr=>0, :raw=>"e0230091", :instr=>"mla", :args=>["r3", "r1", "r0", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[], :deps_lines=>[]}
dl: c,0
==============================
l: 14: mla ["r3", "r3", "r1", "r0"]
d: {:addr=>16, :raw=>"e0230193", :instr=>"mla", :args=>["r3", "r3", "r1", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[{:addr=>12, :raw=>"e0230193", :instr=>"mla", :args=>["r3", "r3", "r1", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[{:addr=>8, :raw=>"e0230193", :instr=>"mla", :args=>["r3", "r3", "r1", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[{:addr=>4, :raw=>"e0230193", :instr=>"mla", :args=>["r3", "r3", "r1", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[{:addr=>0, :raw=>"e0230091", :instr=>"mla", :args=>["r3", "r1", "r0", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[], :deps_lines=>[]}], :deps_lines=>[0]}, {:addr=>0, :raw=>"e0230091", :instr=>"mla", :args=>["r3", "r1", "r0", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[], :deps_lines=>[]}], :deps_lines=>[4, 0]}, {:addr=>0, :raw=>"e0230091", :instr=>"mla", :args=>["r3", "r1", "r0", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[], :deps_lines=>[]}], :deps_lines=>[8, 0]}, {:addr=>0, :raw=>"e0230091", :instr=>"mla", :args=>["r3", "r1", "r0", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[], :deps_lines=>[]}], :deps_lines=>[12, 0]},{:addr=>0, :raw=>"e0230091", :instr=>"mla", :args=>["r3", "r1", "r0", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[], :deps_lines=>[]}
dl: 10,0
==============================
l: 18: mla ["r3", "r3", "r1", "r0"]
d: {:addr=>20, :raw=>"e0230193", :instr=>"mla", :args=>["r3", "r3", "r1", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[{:addr=>16, :raw=>"e0230193", :instr=>"mla", :args=>["r3", "r3", "r1", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[{:addr=>12, :raw=>"e0230193", :instr=>"mla", :args=>["r3", "r3", "r1", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[{:addr=>8, :raw=>"e0230193", :instr=>"mla", :args=>["r3", "r3", "r1", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[{:addr=>4, :raw=>"e0230193", :instr=>"mla", :args=>["r3", "r3", "r1", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[{:addr=>0, :raw=>"e0230091", :instr=>"mla", :args=>["r3", "r1", "r0", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[], :deps_lines=>[]}], :deps_lines=>[0]}, {:addr=>0, :raw=>"e0230091", :instr=>"mla", :args=>["r3", "r1", "r0", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[], :deps_lines=>[]}], :deps_lines=>[4, 0]}, {:addr=>0, :raw=>"e0230091", :instr=>"mla", :args=>["r3", "r1", "r0", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[], :deps_lines=>[]}], :deps_lines=>[8, 0]}, {:addr=>0, :raw=>"e0230091", :instr=>"mla", :args=>["r3", "r1", "r0", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[], :deps_lines=>[]}], :deps_lines=>[12, 0]}, {:addr=>0, :raw=>"e0230091", :instr=>"mla", :args=>["r3", "r1", "r0", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[], :deps_lines=>[]}], :deps_lines=>[16, 0]},{:addr=>0, :raw=>"e0230091", :instr=>"mla", :args=>["r3", "r1", "r0", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[], :deps_lines=>[]}
dl: 14,0
==============================
l: 1c: mla ["r3", "r3", "r1", "r0"]
d: {:addr=>24, :raw=>"e0230193", :instr=>"mla", :args=>["r3", "r3", "r1", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[{:addr=>20, :raw=>"e0230193", :instr=>"mla", :args=>["r3", "r3", "r1", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[{:addr=>16, :raw=>"e0230193", :instr=>"mla", :args=>["r3", "r3", "r1", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[{:addr=>12, :raw=>"e0230193", :instr=>"mla", :args=>["r3", "r3", "r1", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[{:addr=>8, :raw=>"e0230193", :instr=>"mla", :args=>["r3", "r3", "r1", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[{:addr=>4, :raw=>"e0230193", :instr=>"mla", :args=>["r3", "r3", "r1", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[{:addr=>0, :raw=>"e0230091", :instr=>"mla", :args=>["r3", "r1", "r0", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[], :deps_lines=>[]}], :deps_lines=>[0]}, {:addr=>0, :raw=>"e0230091", :instr=>"mla", :args=>["r3", "r1", "r0", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[], :deps_lines=>[]}], :deps_lines=>[4, 0]}, {:addr=>0, :raw=>"e0230091", :instr=>"mla", :args=>["r3", "r1", "r0", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[], :deps_lines=>[]}], :deps_lines=>[8, 0]}, {:addr=>0, :raw=>"e0230091", :instr=>"mla", :args=>["r3", "r1", "r0", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[], :deps_lines=>[]}], :deps_lines=>[12, 0]}, {:addr=>0, :raw=>"e0230091", :instr=>"mla", :args=>["r3", "r1", "r0", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[], :deps_lines=>[]}], :deps_lines=>[16, 0]}, {:addr=>0, :raw=>"e0230091", :instr=>"mla", :args=>["r3", "r1", "r0", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[], :deps_lines=>[]}], :deps_lines=>[20, 0]},{:addr=>0, :raw=>"e0230091", :instr=>"mla", :args=>["r3", "r1", "r0", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[], :deps_lines=>[]}
dl: 18,0
==============================
l: 20: mla ["r0", "r3", "r1", "r0"]
d: {:addr=>28, :raw=>"e0230193", :instr=>"mla", :args=>["r3", "r3", "r1", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[{:addr=>24, :raw=>"e0230193", :instr=>"mla", :args=>["r3", "r3", "r1", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[{:addr=>20, :raw=>"e0230193", :instr=>"mla", :args=>["r3", "r3", "r1", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[{:addr=>16, :raw=>"e0230193", :instr=>"mla", :args=>["r3", "r3", "r1", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[{:addr=>12, :raw=>"e0230193", :instr=>"mla", :args=>["r3", "r3", "r1", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[{:addr=>8, :raw=>"e0230193", :instr=>"mla", :args=>["r3", "r3", "r1", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[{:addr=>4, :raw=>"e0230193", :instr=>"mla", :args=>["r3", "r3", "r1", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[{:addr=>0, :raw=>"e0230091", :instr=>"mla", :args=>["r3", "r1", "r0", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[], :deps_lines=>[]}], :deps_lines=>[0]}, {:addr=>0, :raw=>"e0230091", :instr=>"mla", :args=>["r3", "r1", "r0", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[], :deps_lines=>[]}], :deps_lines=>[4, 0]}, {:addr=>0, :raw=>"e0230091", :instr=>"mla", :args=>["r3", "r1", "r0", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[], :deps_lines=>[]}], :deps_lines=>[8, 0]}, {:addr=>0, :raw=>"e0230091", :instr=>"mla", :args=>["r3", "r1", "r0", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[], :deps_lines=>[]}], :deps_lines=>[12, 0]}, {:addr=>0, :raw=>"e0230091", :instr=>"mla", :args=>["r3", "r1", "r0", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[], :deps_lines=>[]}], :deps_lines=>[16, 0]}, {:addr=>0, :raw=>"e0230091", :instr=>"mla", :args=>["r3", "r1", "r0", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[], :deps_lines=>[]}], :deps_lines=>[20, 0]}, {:addr=>0, :raw=>"e0230091", :instr=>"mla", :args=>["r3", "r1", "r0", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[], :deps_lines=>[]}], :deps_lines=>[24, 0]},{:addr=>0, :raw=>"e0230091", :instr=>"mla", :args=>["r3", "r1", "r0", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[], :deps_lines=>[]}
dl: 1c,0
==============================
l: 24: bx ["lr"]
d: 
dl: 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
parallelizing bb: unrolled@0: 10 lines
parallelized into 2 pars
generating bb: unrolled@0
######################################################################
unrolled@0[0:24]->
A 9 9 100.0 100.0
L> mla, mla, mla, mla, mla, mla, mla, mla, mla, bx, 
pars: 2
0> bx, 
1> mla, mla, mla, mla, mla, mla, mla, mla, mla, mla, mla, mla, mla, mla, mla, mla, 
trans: 
variable r3_0, r3_4, r3_0, r3_8, r3_0, r3_c, r3_0, r3_10, r3_0, r3_14, r3_0, r3_18, r3_0, r3_1c, r3_0, r0_20 : std_logic_vector(31 downto 0);
-------------
trans 0>
-- bx@24
regs_out(0) <= regs_in(0);
regs_out(1) <= regs_in(1);
regs_out(2) <= regs_in(2);
regs_out(3) <= regs_in(3);
regs_out(4) <= regs_in(4);
regs_out(5) <= regs_in(5);
regs_out(6) <= regs_in(6);
regs_out(7) <= regs_in(7);
regs_out(8) <= regs_in(8);
regs_out(9) <= regs_in(9);
regs_out(10) <= regs_in(10);
regs_out(11) <= regs_in(11);
regs_out(12) <= regs_in(12);
regs_out(13) <= regs_in(13);
trans 1>
r3_0 := std_logic_vector(RESIZE(unsigned(regs_in(1)) * unsigned(regs_in(0)) + unsigned(regs_in(0)), 32));
r3_4 := std_logic_vector(RESIZE(unsigned(r3_0) * unsigned(regs_in(1)) + unsigned(regs_in(0)), 32));
r3_0 := std_logic_vector(RESIZE(unsigned(regs_in(1)) * unsigned(regs_in(0)) + unsigned(regs_in(0)), 32));
r3_8 := std_logic_vector(RESIZE(unsigned(r3_0) * unsigned(regs_in(1)) + unsigned(regs_in(0)), 32));
r3_0 := std_logic_vector(RESIZE(unsigned(regs_in(1)) * unsigned(regs_in(0)) + unsigned(regs_in(0)), 32));
r3_c := std_logic_vector(RESIZE(unsigned(r3_0) * unsigned(regs_in(1)) + unsigned(regs_in(0)), 32));
r3_0 := std_logic_vector(RESIZE(unsigned(regs_in(1)) * unsigned(regs_in(0)) + unsigned(regs_in(0)), 32));
r3_10 := std_logic_vector(RESIZE(unsigned(r3_0) * unsigned(regs_in(1)) + unsigned(regs_in(0)), 32));
r3_0 := std_logic_vector(RESIZE(unsigned(regs_in(1)) * unsigned(regs_in(0)) + unsigned(regs_in(0)), 32));
r3_14 := std_logic_vector(RESIZE(unsigned(r3_0) * unsigned(regs_in(1)) + unsigned(regs_in(0)), 32));
r3_0 := std_logic_vector(RESIZE(unsigned(regs_in(1)) * unsigned(regs_in(0)) + unsigned(regs_in(0)), 32));
r3_18 := std_logic_vector(RESIZE(unsigned(r3_0) * unsigned(regs_in(1)) + unsigned(regs_in(0)), 32));
r3_0 := std_logic_vector(RESIZE(unsigned(regs_in(1)) * unsigned(regs_in(0)) + unsigned(regs_in(0)), 32));
r3_1c := std_logic_vector(RESIZE(unsigned(r3_0) * unsigned(regs_in(1)) + unsigned(regs_in(0)), 32));
r3_0 := std_logic_vector(RESIZE(unsigned(regs_in(1)) * unsigned(regs_in(0)) + unsigned(regs_in(0)), 32));
r0_20 := std_logic_vector(RESIZE(unsigned(r3_0) * unsigned(regs_in(1)) + unsigned(regs_in(0)), 32));
regs_out(0) <= r0_20;
regs_out(1) <= regs_in(1);
regs_out(2) <= regs_in(2);
regs_out(3) <= r3_0;
regs_out(4) <= regs_in(4);
regs_out(5) <= regs_in(5);
regs_out(6) <= regs_in(6);
regs_out(7) <= regs_in(7);
regs_out(8) <= regs_in(8);
regs_out(9) <= regs_in(9);
regs_out(10) <= regs_in(10);
regs_out(11) <= regs_in(11);
regs_out(12) <= regs_in(12);
regs_out(13) <= regs_in(13);
######################################################################
order analysing bb: partial_unrolled@4c
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
==============================
l: 58: mov ["ip", "#0"]
d: 
dl: 
==============================
l: 5c: mla ["r3", "r1", "r3", "r0"]
d: 
dl: 
==============================
l: 60: add ["ip", "ip", "#1"]
d: 
dl: 
==============================
l: 64: cmp ["ip", "r2"]
d: 
dl: 
==============================
l: 68: mla ["r3", "r3", "r1", "r0"]
d: {:addr=>92, :raw=>"e0230391", :instr=>"mla", :args=>["r3", "r1", "r3", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[], :deps_lines=>[]}
dl: 5c
==============================
l: 6c: mla ["r3", "r3", "r1", "r0"]
d: {:addr=>104, :raw=>"e0230193", :instr=>"mla", :args=>["r3", "r3", "r1", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[{:addr=>92, :raw=>"e0230391", :instr=>"mla", :args=>["r3", "r1", "r3", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[], :deps_lines=>[]}], :deps_lines=>[92]}
dl: 68
==============================
l: 70: mla ["r3", "r3", "r1", "r0"]
d: {:addr=>108, :raw=>"e0230193", :instr=>"mla", :args=>["r3", "r3", "r1", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[{:addr=>104, :raw=>"e0230193", :instr=>"mla", :args=>["r3", "r3", "r1", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[{:addr=>92, :raw=>"e0230391", :instr=>"mla", :args=>["r3", "r1", "r3", "r0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[], :deps_lines=>[]}], :deps_lines=>[92]}], :deps_lines=>[104]}
dl: 6c
==============================
l: 74: bne ["5c <partial_unrolled+0x10>"]
d: 
dl: 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
parallelizing bb: partial_unrolled@76: 8 lines
parallelized into 5 pars
generating bb: partial_unrolled@76
Unable to translate par: DP args error ["ip", "ip", "#1"]
Unable to translate par: DP args error ["ip", "#0"]
######################################################################
partial_unrolled@4c[58:74]->
A 6 3 85.71428571428571 42.857142857142854
L> mov, mla, add, cmp, mla, mla, mla, bne, 
pars: 5
0> bne, 
1> mla, mla, mla, mla, 
2> cmp, 
3> add, 
4> mov, 
trans: 
variable r3_5c, r3_68, r3_6c, r3_70 : std_logic_vector(31 downto 0);
-------------
trans 0>
-- bne@74
regs_out(0) <= regs_in(0);
regs_out(1) <= regs_in(1);
regs_out(2) <= regs_in(2);
regs_out(3) <= regs_in(3);
regs_out(4) <= regs_in(4);
regs_out(5) <= regs_in(5);
regs_out(6) <= regs_in(6);
regs_out(7) <= regs_in(7);
regs_out(8) <= regs_in(8);
regs_out(9) <= regs_in(9);
regs_out(10) <= regs_in(10);
regs_out(11) <= regs_in(11);
regs_out(12) <= regs_in(12);
regs_out(13) <= regs_in(13);
trans 1>
r3_5c := std_logic_vector(RESIZE(unsigned(regs_in(1)) * unsigned(regs_in(3)) + unsigned(regs_in(0)), 32));
r3_68 := std_logic_vector(RESIZE(unsigned(r3_5c) * unsigned(regs_in(1)) + unsigned(regs_in(0)), 32));
r3_6c := std_logic_vector(RESIZE(unsigned(r3_68) * unsigned(regs_in(1)) + unsigned(regs_in(0)), 32));
r3_70 := std_logic_vector(RESIZE(unsigned(r3_6c) * unsigned(regs_in(1)) + unsigned(regs_in(0)), 32));
regs_out(0) <= regs_in(0);
regs_out(1) <= regs_in(1);
regs_out(2) <= regs_in(2);
regs_out(3) <= r3_70;
regs_out(4) <= regs_in(4);
regs_out(5) <= regs_in(5);
regs_out(6) <= regs_in(6);
regs_out(7) <= regs_in(7);
regs_out(8) <= regs_in(8);
regs_out(9) <= regs_in(9);
regs_out(10) <= regs_in(10);
regs_out(11) <= regs_in(11);
regs_out(12) <= regs_in(12);
regs_out(13) <= regs_in(13);
trans 2>
-- cmp@64
regs_out(0) <= regs_in(0);
regs_out(1) <= regs_in(1);
regs_out(2) <= regs_in(2);
regs_out(3) <= regs_in(3);
regs_out(4) <= regs_in(4);
regs_out(5) <= regs_in(5);
regs_out(6) <= regs_in(6);
regs_out(7) <= regs_in(7);
regs_out(8) <= regs_in(8);
regs_out(9) <= regs_in(9);
regs_out(10) <= regs_in(10);
regs_out(11) <= regs_in(11);
regs_out(12) <= regs_in(12);
regs_out(13) <= regs_in(13);
######################################################################
order analysing bb: rolled@28
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
==============================
l: 30: mov ["r3", "#0"]
d: 
dl: 
==============================
l: 34: add ["r3", "r3", "#1"]
d: {:addr=>48, :raw=>"e3a03000", :instr=>"mov", :args=>["r3", "#0"], :branch=>{:base=>nil, :offset=>nil}, :deps=>[], :deps_lines=>[]}
dl: 30
==============================
l: 38: cmp ["r3", "r2"]
d: 
dl: 
==============================
l: 3c: mla ["ip", "r1", "ip", "r0"]
d: 
dl: 
==============================
l: 40: bne ["34 <rolled+0xc>"]
d: 
dl: 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
parallelizing bb: rolled@40: 5 lines
parallelized into 4 pars
generating bb: rolled@40
Unable to translate par: MulArgsError ["ip", "r1", "ip", "r0"]
Unable to translate par: DP args error ["r3", "#0"]
######################################################################
rolled@28[30:40]->
A 3 2 75.0 50.0
L> mov, add, cmp, mla, bne, 
pars: 4
0> bne, 
1> mla, 
2> cmp, 
3> mov, add, 
trans: 
variable  : std_logic_vector(31 downto 0);
-------------
trans 0>
-- bne@40
regs_out(0) <= regs_in(0);
regs_out(1) <= regs_in(1);
regs_out(2) <= regs_in(2);
regs_out(3) <= regs_in(3);
regs_out(4) <= regs_in(4);
regs_out(5) <= regs_in(5);
regs_out(6) <= regs_in(6);
regs_out(7) <= regs_in(7);
regs_out(8) <= regs_in(8);
regs_out(9) <= regs_in(9);
regs_out(10) <= regs_in(10);
regs_out(11) <= regs_in(11);
regs_out(12) <= regs_in(12);
regs_out(13) <= regs_in(13);
trans 1>
-- cmp@38
regs_out(0) <= regs_in(0);
regs_out(1) <= regs_in(1);
regs_out(2) <= regs_in(2);
regs_out(3) <= regs_in(3);
regs_out(4) <= regs_in(4);
regs_out(5) <= regs_in(5);
regs_out(6) <= regs_in(6);
regs_out(7) <= regs_in(7);
regs_out(8) <= regs_in(8);
regs_out(9) <= regs_in(9);
regs_out(10) <= regs_in(10);
regs_out(11) <= regs_in(11);
regs_out(12) <= regs_in(12);
regs_out(13) <= regs_in(13);
######################################################################
order analysing bb: partial_unrolled@4c
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
==============================
l: 4c: asr ["r2", "r2", "#2"]
d: 
dl: 
==============================
l: 50: cmp ["r2", "#0"]
d: 
dl: 
==============================
l: 54: ble ["78 <partial_unrolled+0x2c>"]
d: 
dl: 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
parallelizing bb: partial_unrolled@76: 3 lines
parallelized into 3 pars
generating bb: partial_unrolled@76
######################################################################
partial_unrolled@4c[4c:54]->
A 1 1 50.0 50.0
L> asr, cmp, ble, 
pars: 3
0> ble, 
1> cmp, 
2> asr, 
trans: 
variable  : std_logic_vector(31 downto 0);
-------------
trans 0>
-- ble@54
regs_out(0) <= regs_in(0);
regs_out(1) <= regs_in(1);
regs_out(2) <= regs_in(2);
regs_out(3) <= regs_in(3);
regs_out(4) <= regs_in(4);
regs_out(5) <= regs_in(5);
regs_out(6) <= regs_in(6);
regs_out(7) <= regs_in(7);
regs_out(8) <= regs_in(8);
regs_out(9) <= regs_in(9);
regs_out(10) <= regs_in(10);
regs_out(11) <= regs_in(11);
regs_out(12) <= regs_in(12);
regs_out(13) <= regs_in(13);
trans 1>
-- cmp@50
regs_out(0) <= regs_in(0);
regs_out(1) <= regs_in(1);
regs_out(2) <= regs_in(2);
regs_out(3) <= regs_in(3);
regs_out(4) <= regs_in(4);
regs_out(5) <= regs_in(5);
regs_out(6) <= regs_in(6);
regs_out(7) <= regs_in(7);
regs_out(8) <= regs_in(8);
regs_out(9) <= regs_in(9);
regs_out(10) <= regs_in(10);
regs_out(11) <= regs_in(11);
regs_out(12) <= regs_in(12);
regs_out(13) <= regs_in(13);
trans 2>
-- asr@4c
regs_out(0) <= regs_in(0);
regs_out(1) <= regs_in(1);
regs_out(2) <= regs_in(2);
regs_out(3) <= regs_in(3);
regs_out(4) <= regs_in(4);
regs_out(5) <= regs_in(5);
regs_out(6) <= regs_in(6);
regs_out(7) <= regs_in(7);
regs_out(8) <= regs_in(8);
regs_out(9) <= regs_in(9);
regs_out(10) <= regs_in(10);
regs_out(11) <= regs_in(11);
regs_out(12) <= regs_in(12);
regs_out(13) <= regs_in(13);
######################################################################
order analysing bb: rolled@28
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
==============================
l: 44: mov ["r0", "ip"]
d: 
dl: 
==============================
l: 48: bx ["lr"]
d: 
dl: 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
parallelizing bb: rolled@40: 2 lines
parallelized into 2 pars
generating bb: rolled@40
Unable to translate par: DP args error ["r0", "ip"]
######################################################################
rolled@28[44:48]->
A 1 1 100.0 100.0
L> mov, bx, 
pars: 2
0> bx, 
1> mov, 
trans: 
variable  : std_logic_vector(31 downto 0);
-------------
trans 0>
-- bx@48
regs_out(0) <= regs_in(0);
regs_out(1) <= regs_in(1);
regs_out(2) <= regs_in(2);
regs_out(3) <= regs_in(3);
regs_out(4) <= regs_in(4);
regs_out(5) <= regs_in(5);
regs_out(6) <= regs_in(6);
regs_out(7) <= regs_in(7);
regs_out(8) <= regs_in(8);
regs_out(9) <= regs_in(9);
regs_out(10) <= regs_in(10);
regs_out(11) <= regs_in(11);
regs_out(12) <= regs_in(12);
regs_out(13) <= regs_in(13);
######################################################################
order analysing bb: rolled@28
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
==============================
l: 28: cmp ["r2", "#0"]
d: 
dl: 
==============================
l: 2c: ble ["44 <rolled+0x1c>"]
d: 
dl: 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
parallelizing bb: rolled@40: 2 lines
parallelized into 2 pars
generating bb: rolled@40
######################################################################
rolled@28[28:2c]->
A 0 0 0.0 0.0
L> cmp, ble, 
pars: 2
0> ble, 
1> cmp, 
trans: 
variable  : std_logic_vector(31 downto 0);
-------------
trans 0>
-- ble@2c
regs_out(0) <= regs_in(0);
regs_out(1) <= regs_in(1);
regs_out(2) <= regs_in(2);
regs_out(3) <= regs_in(3);
regs_out(4) <= regs_in(4);
regs_out(5) <= regs_in(5);
regs_out(6) <= regs_in(6);
regs_out(7) <= regs_in(7);
regs_out(8) <= regs_in(8);
regs_out(9) <= regs_in(9);
regs_out(10) <= regs_in(10);
regs_out(11) <= regs_in(11);
regs_out(12) <= regs_in(12);
regs_out(13) <= regs_in(13);
trans 1>
-- cmp@28
regs_out(0) <= regs_in(0);
regs_out(1) <= regs_in(1);
regs_out(2) <= regs_in(2);
regs_out(3) <= regs_in(3);
regs_out(4) <= regs_in(4);
regs_out(5) <= regs_in(5);
regs_out(6) <= regs_in(6);
regs_out(7) <= regs_in(7);
regs_out(8) <= regs_in(8);
regs_out(9) <= regs_in(9);
regs_out(10) <= regs_in(10);
regs_out(11) <= regs_in(11);
regs_out(12) <= regs_in(12);
regs_out(13) <= regs_in(13);
######################################################################
order analysing bb: partial_unrolled@4c
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
==============================
l: 78: mov ["r0", "r3"]
d: 
dl: 
==============================
l: 7c: bx ["lr"]
d: 
dl: 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
parallelizing bb: partial_unrolled@76: 2 lines
parallelized into 2 pars
generating bb: partial_unrolled@76
######################################################################
partial_unrolled@4c[78:7c]->
A 1 1 100.0 100.0
L> mov, bx, 
pars: 2
0> bx, 
1> mov, 
trans: 
variable  : std_logic_vector(31 downto 0);
-------------
trans 0>
-- bx@7c
regs_out(0) <= regs_in(0);
regs_out(1) <= regs_in(1);
regs_out(2) <= regs_in(2);
regs_out(3) <= regs_in(3);
regs_out(4) <= regs_in(4);
regs_out(5) <= regs_in(5);
regs_out(6) <= regs_in(6);
regs_out(7) <= regs_in(7);
regs_out(8) <= regs_in(8);
regs_out(9) <= regs_in(9);
regs_out(10) <= regs_in(10);
regs_out(11) <= regs_in(11);
regs_out(12) <= regs_in(12);
regs_out(13) <= regs_in(13);
trans 1>
r0 <= regs_in(3);
regs_out(0) <= regs_in(0);
regs_out(1) <= regs_in(1);
regs_out(2) <= regs_in(2);
regs_out(3) <= regs_in(3);
regs_out(4) <= regs_in(4);
regs_out(5) <= regs_in(5);
regs_out(6) <= regs_in(6);
regs_out(7) <= regs_in(7);
regs_out(8) <= regs_in(8);
regs_out(9) <= regs_in(9);
regs_out(10) <= regs_in(10);
regs_out(11) <= regs_in(11);
regs_out(12) <= regs_in(12);
regs_out(13) <= regs_in(13);
######################################################################
VHDL Generation concluded
